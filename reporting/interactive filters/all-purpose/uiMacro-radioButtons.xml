<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<!-- 

This ui macro runs shows radio buttons that trigger interactive filtering.
The data it needs to do so are provided by a dynamic content block which 
can be placed on a dashboard to enable the user to filter their report data.

The dynamic content block stores all data needed to drive ui and behaviour
in an object called parameters.
The parameters are used to set up the radio buttons (labels/values).
The client script initialize, which is loaded from the ui script shFilterRadioButton,
takes care of the following:

- check the preferred radio button
- add event listener to handle selection change
- publish the filter created by the selected option 

The macro also contains css.

-->
  <g:evaluate>
  	<!-- 

On the server side, a unique id for this radio buttons element is created. 
This is needed to prevent interference in case multiple radio button-elements are 
added on the same dashboard. The unique id is created by concatenating the name,
base table and base field. The unique id is stored as parameters.settings.uid.

If the user has used this filter before, the previously used value will be 
retrieved and used. Otherwise, the first option will be selected. The retrieved
preference will be stored as parameters.settings.preference.
After selecting a different option that value will be stored as a user preference.

Finally, the object is converted to a JSON string which is sent to the client.

  	 -->
	//retrieve the parameters object and convert it to a json object
	var stringParameters = '${jvar_parameters}';
	var parameters = JSON.parse(stringParameters);

	// we need an id for the html filter-element that is unique within this dashboard
	// the filter concatenates the filter name, the name of the base table and the field on the base table to be filtered on and replaces periods with underscores so we can use it in css
	var uniqueId = ('${jvar_name}_'+parameters.mapping.base.table+'_'+parameters.mapping.base.field).replace(/\./g, '_');
	parameters.settings.uid = uniqueId;

	//find the user preferences; set to default values if not found
	parameters.settings.preference = gs.getUser().getPreference(uniqueId) || 'noValueYet';
	stringParameters = JSON.stringify(parameters);
  </g:evaluate>

 <div id="${uniqueId}" class="filter-wrapper" >
	<ul class="no-bullets">
		<j:forEach var="jvar_radio_button" items="${parameters.settings.radioButtons}" indexVar="jvar_i">
			<li>
				<label for="${uniqueId}-${jvar_i}">
		  			<input type="radio" id="${uniqueId}-${jvar_i}" name="${jvar_name}" value="${jvar_radio_button.value}" filter="${jvar_radio_button.filter}">${jvar_radio_button.label}</input>
		  		</label>
			</li>
		</j:forEach>
	</ul>
</div>

  <style>
.no-bullets {
	list-style-type: none;
	padding-inline-start: 20px;
}
  </style>

  <script language="javascript" src="shFilterRadioButton.jsdbx" />
  
  <script>
	// convert string data from the dynamic content block back to an object
	var parameters = JSON.parse('${stringParameters}');
	initializeRadioButtons(document, '${uniqueId}', parameters)
  </script>
</j:jelly>    

